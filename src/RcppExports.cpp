// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_gfunction
NumericMatrix rcpp_gfunction(NumericVector alp, NumericVector the, NumericMatrix x);
RcppExport SEXP _MR_rcpp_gfunction(SEXP alpSEXP, SEXP theSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the(theSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_gfunction(alp, the, x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _MR_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hess_lambda
NumericMatrix rcpp_hess_lambda(double bet, double a, NumericVector alp, NumericVector the, NumericVector mu, NumericVector gam, NumericVector lam, NumericMatrix x, NumericVector rho);
RcppExport SEXP _MR_rcpp_hess_lambda(SEXP betSEXP, SEXP aSEXP, SEXP alpSEXP, SEXP theSEXP, SEXP muSEXP, SEXP gamSEXP, SEXP lamSEXP, SEXP xSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bet(betSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the(theSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_hess_lambda(bet, a, alp, the, mu, gam, lam, x, rho));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_obj
double rcpp_obj(double bet, NumericVector alp, NumericVector the, NumericVector lam, NumericVector the0, NumericMatrix inv_the, NumericVector pi, NumericMatrix inv_pi, NumericMatrix x);
RcppExport SEXP _MR_rcpp_obj(SEXP betSEXP, SEXP alpSEXP, SEXP theSEXP, SEXP lamSEXP, SEXP the0SEXP, SEXP inv_theSEXP, SEXP piSEXP, SEXP inv_piSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bet(betSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the(theSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the0(the0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inv_the(inv_theSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inv_pi(inv_piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_obj(bet, alp, the, lam, the0, inv_the, pi, inv_pi, x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_obj_lambda
double rcpp_obj_lambda(double bet, double a, NumericVector alp, NumericVector the, NumericVector mu, NumericVector gam, NumericVector lam, NumericMatrix x, NumericVector rho);
RcppExport SEXP _MR_rcpp_obj_lambda(SEXP betSEXP, SEXP aSEXP, SEXP alpSEXP, SEXP theSEXP, SEXP muSEXP, SEXP gamSEXP, SEXP lamSEXP, SEXP xSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bet(betSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the(theSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_obj_lambda(bet, a, alp, the, mu, gam, lam, x, rho));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_score
NumericVector rcpp_score(double bet, NumericVector alp, NumericVector the, NumericVector lam, NumericVector the0, NumericMatrix inv_the, NumericVector pi, NumericMatrix inv_pi, NumericMatrix x);
RcppExport SEXP _MR_rcpp_score(SEXP betSEXP, SEXP alpSEXP, SEXP theSEXP, SEXP lamSEXP, SEXP the0SEXP, SEXP inv_theSEXP, SEXP piSEXP, SEXP inv_piSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bet(betSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the(theSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the0(the0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inv_the(inv_theSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inv_pi(inv_piSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_score(bet, alp, the, lam, the0, inv_the, pi, inv_pi, x));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_score_lambda
/*  * this function returns components in rcpp_score that corresponds to lambda  * will be used to resolve dual problem subject to lambda  */  NumericVector rcpp_score_lambda(double bet, double a, NumericVector alp, NumericVector the, NumericVector mu, NumericVector gam, NumericVector lam, NumericMatrix x, NumericVector rho);
RcppExport SEXP _MR_rcpp_score_lambda(SEXP betSEXP, SEXP aSEXP, SEXP alpSEXP, SEXP theSEXP, SEXP muSEXP, SEXP gamSEXP, SEXP lamSEXP, SEXP xSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type bet(betSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alp(alpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type the(theSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_score_lambda(bet, a, alp, the, mu, gam, lam, x, rho));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MR_rcpp_gfunction", (DL_FUNC) &_MR_rcpp_gfunction, 3},
    {"_MR_rcpp_hello_world", (DL_FUNC) &_MR_rcpp_hello_world, 0},
    {"_MR_rcpp_hess_lambda", (DL_FUNC) &_MR_rcpp_hess_lambda, 9},
    {"_MR_rcpp_obj", (DL_FUNC) &_MR_rcpp_obj, 9},
    {"_MR_rcpp_obj_lambda", (DL_FUNC) &_MR_rcpp_obj_lambda, 9},
    {"_MR_rcpp_score", (DL_FUNC) &_MR_rcpp_score, 9},
    {"_MR_rcpp_score_lambda", (DL_FUNC) &_MR_rcpp_score_lambda, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_MR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
